# CNN
x = tf.placeholder(tf.float32, [None, 64, 64])
x_image = tf.reshape(x, [-1, 64, 64, 1])
y_ = tf.placeholder(tf.float32, [None, 40])

# convolutional layer 1
w_conv1 = weight_variable([5, 5, 1, 8])
b_conv1 = bias_variable([8])
h_conv1 = tf.nn.relu(conv2d(x_image, w_conv1) + b_conv1)
h_pool1 = max_pool_2x2(h_conv1)

# convolutional layer 2
w_conv2 = weight_variable([5, 5, 8, 16])
b_conv2 = bias_variable([16])
h_conv2 = tf.nn.relu(conv2d(h_pool1, w_conv2) + b_conv2)
h_pool2 = max_pool_2x2(h_conv2)

# convolutional layer 3
w_conv3 = weight_variable([5, 5, 16, 32])
b_conv3 = bias_variable([32])
h_conv3 = tf.nn.relu(conv2d(h_pool2, w_conv3) + b_conv3)
h_pool3 = max_pool_2x2(h_conv3)

#convolutional layer 4
w_conv4 = weight_variable([5, 5, 32, 64])
b_conv4 = bias_variable([64])
h_conv4 = tf.nn.relu(conv2d(h_pool3, w_conv4) + b_conv4)

h_conv4_flat = tf.reshape(h_conv4, [-1, 8 * 8 * 64])

# densely connected layer, 1024 nuerals 
w_fc1 = weight_variable([8 * 8 * 64, 1024])
b_fc1 = bias_variable([1024])
h_fc1 = tf.nn.relu(tf.matmul(h_conv4_flat, w_fc1) + b_fc1)

# drop out
keep_prob = tf.placeholder(tf.float32)
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

# readout layer
w_fc2 = weight_variable([1024, 40])
b_fc2 = bias_variable([40])
y_conv = tf.matmul(h_fc1_drop, w_fc2) + b_fc2